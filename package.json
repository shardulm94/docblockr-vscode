{
    "name": "docblockr-vscode",
    "displayName": "DocBlockr",
    "description": "A VSCode port of DocBlockr",
    "version": "0.0.1",
    "publisher": "shardul94",
    "engines": {
        "vscode": "^0.10.1"
    },
    "categories": [
        "Other"
    ],
    "main": "./out/src/extension",
    "contributes": {
        "languages": [
            {
                "id": "javascript",
                "aliases": [
                    "Javascript",
                    "javascript"
                ],
                "extensions": [
                    ".js"
                ]
            }
        ],
        "keybindings": [
            {
                "command": "docblockr.runTab",
                "key": "tab",
                "when": "editorTextFocus && !editorHasSelection && !editorHasMultipleSelections && !suggestWidgetVisible"
            }
        ],
        "configuration": {
            "type": "object",
            "title": "DocBlockr Configuration",
            "properties": {
                "docblockr.logLevel": {
                    "type": "string",
                    "enum": [
                        "none",
                        "log",
                        "info",
                        "warn",
                        "error"
                    ],
                    "default": "log",
                    "description": "Controls the verbosity of logging. Logs can be seen in the console by opening the dev tools. `log` is the most verbose and `error` will only show critical errors."
                },
                "docblockr.indentationSpaces": {
                    "type": "number",
                    "default": 1,
                    "description": "The number of spaces to add after the leading '*'."
                },
                "docblockr.simpleMode": {
                    "type": "boolean",
                    "default": false,
                    "description": "If set to true, DocBlockr won't parse any code, providing no default templates. All other functions work as normal."
                },
                "docblockr.extraTagsGoAfter": {
                    "type": "boolean",
                    "default": false,
                    "description": "If extra tags are defined, by default they go between the description and the param/return tags. If this is set to true, the extra tags are placed at the very end."
                },
                "docblockr.functionDescription": {
                    "type": "boolean",
                    "default": true,
                    "description": "Add a '[function_name description]' for the function block."
                },
                "docblockr.autoaddMethodTag": {
                    "type": "boolean",
                    "default": false,
                    "description": "Indicates whether the @method tag should be added automatically."
                },
                "docblockr.paramName": {
                    "type": "boolean",
                    "default": true,
                    "description": "Adds a name of parameter in param tag."
                },
                "docblockr.paramDescription": {
                    "type": "boolean",
                    "default": true,
                    "description": "Adds a '[description]' placeholder for the param tag."
                },
                "docblockr.returnTag": {
                    "type": "string",
                    "default": "@return",
                    "description": "Since there seems to be no agreed standard for \"@return\" or \"@returns\", use this setting to rename it as you wish."
                },
                "docblockr.returnDescription": {
                    "type": "boolean",
                    "default": true,
                    "description": "Adds a '[description]' placeholder for the param tag."
                },
                "docblockr.alignTags": {
                    "type": "string",
                    "default": "deep",
                    "description": "Whether the words following the @tags should align.\nPossible values are 'no', 'shallow', 'deep'\nFor backwards compatibility, false is equivalent to 'no', true is equivalent to 'shallow'\n\n'shallow' will just align the first words after the tag. eg:\n@param    {MyCustomClass} myVariable desc1\n@return   {String} foo desc2\n@property {Number} blahblah desc3\n\n'deep' will align each component of the tags, eg:\n@param    {MyCustomClass} myVariable desc1\n@return   {String}        foo        desc2\n@property {Number}        blahblah   desc3"
                },
                "docblockr.perSectionIndent": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether each section should be indented to the same level, or indent each one individually. (When true, the @param section will lose the extra space immediately after each '@param')."
                },
                "docblockr.extraTags": {
                    "type": "array",
                    "default": [],
                    "description": "Any additional boilerplate tags which should be added to each block. Should be an array of strings. Note that this only applies when a docblock is opened directly preceding a function. Tab points can be added by using snippet syntax, eg: ${1:default text}"
                },
                "docblockr.notationMap": {
                    "type": "object",
                    "default": { "notations": []},
                    "description": "A map to determine the value of variables, should hungarian notation (or similar) be in use. Should be an array of notations inside the \"notations\" tag."
                },
                "docblockr.lowerCasePrimitives": {
                    "type": "boolean",
                    "default": false,
                    "description": "If set to true, primitives such as \"Number\" and \"String\" will be documented as \"number\" and \"string\"."
                },
                "docblockr.shortPrimitives": {
                    "type": "boolean",
                    "default": false,
                    "description": "If set to true, primitives such as \"boolean\" and \"integer\" will be shortened to \"bool\" and \"int\"."
                }
            }
        }
    },
    "activationEvents": [
        "onLanguage:javascript"
    ],
    "scripts": {
        "vscode:prepublish": "node ./node_modules/vscode/bin/compile",
        "compile": "node ./node_modules/vscode/bin/compile -watch -p ./"
    },
    "devDependencies": {
        "typescript": "^1.6.2",
        "vscode": "0.10.x"
    },
    "dependencies": {
        "xregexp": "^3.0.0"
    }
}